import("//build/toolchain/emscripten/emscripten.gni")

template("typescript_target") {
    tsc_path = "$emscripten_node_path/tsc"
    if (host_os == "win") {
        tsc_path += ".cmd"
    }

    action(target_name) {
        forward_variables_from(invoker, ["sources", "typescript_output_directory", "deps"])
        script = "//build/toolchain/emscripten/typescript_compile.py"
        args = [ "$tsc_path", "--target", "esnext", "--module", "CommonJS", "--esModuleInterop", "true", "--forceConsistentCasingInFileNames", "true", "--outDir", rebase_path(typescript_output_directory)] + rebase_path(sources)
        outputs = []
        foreach(source_file, sources) {
            output_file = string_replace(source_file, ".ts", ".js")
            outputs += [ "$typescript_output_directory/$output_file" ]
        }
    }
}
template("emscripten_target")
{
    #For now only these targets are supported
    assert(is_emscripten && defined(invoker.emscripten_target_type) 
    && (invoker.emscripten_target_type == "executable" || invoker.emscripten_target_type == "shared_library" || invoker.emscripten_target_type == "static_library"))

    base_target_name = target_name

    if (defined(invoker.html_sources)) {
        copy("copy_html_sources_$base_target_name") {
            sources = invoker.html_sources
            outputs = [ "$root_out_dir/{{source_target_relative}}" ]
        }
    }

    if(defined(invoker.typescript_merge_sources)) {
        typescript_target("typescript_merge_compile_$base_target_name") {
            typescript_output_directory = target_out_dir
            sources = invoker.typescript_merge_sources
        }
    }

    target(invoker.emscripten_target_type, base_target_name) {
        forward_variables_from(invoker, "*", [ "typescript_sources" ])

        if (!defined(defines)) {
            defines = []
        }
        if (!defined(deps)) {
            deps = []
        }
        if(!defined(inputs)) {
            inputs = []
        }
        if(!defined(ldflags)) {
            ldflags = []
        }

        if (defined(static_deps))
        {
            foreach(static_dep, static_deps) {
                deps += [ static_dep ]
                static_dep_target_name = get_label_info(static_dep, "name")
                defines += [ string_to_upper(static_dep_target_name) + "_STATIC" ]
            }
        }

        if(defined(html_sources)) {
            deps += [ ":copy_html_sources_$target_name" ]
        }

        if (defined(typescript_merge_sources)) {
            foreach(merge_source, typescript_merge_sources) {
                output_file = rebase_path(merge_source, "", target_out_dir)
                ldflags += ["--js-library", string_replace(output_file, ".ts", ".js")]           
            }
            deps += [ ":typescript_merge_compile_$base_target_name" ]
            inputs += typescript_merge_sources
        }
        
        # emar doesn't support --embind-emit-tsd
        if(emscripten_target_type == "static_library") {
            defines += [ string_to_upper(base_target_name) + "_STATIC" ]
        } 
    }

    if(defined(invoker.typescript_sources)) {
        typescript_target("typescript_compile_$base_target_name") {
            typescript_output_directory = root_out_dir
            sources = invoker.typescript_sources
            deps = [":$base_target_name"]
        }
    }   
}